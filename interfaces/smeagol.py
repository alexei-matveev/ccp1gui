#
#    This file is part of the CCP1 Graphical User Interface (ccp1gui)
# 
#   (C) 2002-2006 CCLRC Daresbury Laboratory
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
# 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
"""Implements the GAMESS-UK specific calculation (Calc) and
calculation editor (CalcEd) classes
"""

# import python modules
import os
import sys
import socket
import glob

# import external modules
import Tkinter
import Pmw
import tkFileDialog

# import internal modules
import calc, calced
import jobmanager
import tools
import viewer.help
from viewer.defaults import defaults
from viewer.paths import paths
#from interfaces import smeagolreader
from smeagolio import SmeagolIO


LOCALHOST = socket.gethostname()


class SMEAGOLCalc(calc.Calc):
    """GAMESS-UK specifics."""
    def __init__(self, **kw):

        
        calc.Calc.__init__(self,**kw)

        self.debug = None
        self.set_program('SMEAGOL')
        self.set_title('This file was generated by the CCP1 GUI')

        smeagol_input = defaults.get_value( 'smeagol_input' )
        if smeagol_input:
            # User has opened an fdf file so assume this the input
            self.set_parameter("input_files",[smeagol_input])
            directory,filename = os.path.split( smeagol_input )
            self.set_parameter("local_directory",directory)
            name = os.path.splitext( filename )[0]
            self.set_parameter("job_name",name)
        else:
            # Just use some sensible defaults
            self.set_parameter("job_name","unknown")
            self.set_parameter("input_files",[])
            self.set_parameter("local_directory",paths['user'])

    def get_editor_class(self):
        return SMEAGOLCalcEd


    def WriteInput(self,filename=None):
        """Write the SMEAGOL input file"""

        return None
        
    def makejob(self,writeinput=None,graph=None):
        """
        Construct the sequence of job steps
        """
        #Get an editor instance to pop up tk-error widgets
        ed = self.get_editor()

        #
        #  Need to decide what kind of job run
        # 
        job = self.get_job()
        if not job:
            job = self.create_job()

        jobtype = job.jobtype
        
        # Run job from the specified directory
        directory = self.get_parameter('local_directory')
        os.chdir(directory)
        print "job running from directory: %s" % directory

        # Default values for all jobs - may be changed below
        job_name = self.get_parameter("job_name")
        job.name    = job_name

        # Block of code to tweak the job depending on how it is being run
        if jobtype == LOCALHOST:
            job_desc = 'Running SMEAGOL on %s' % LOCALHOST
            
        elif jobtype == 'RMCS':
            job_desc = 'Running SMEAGOL with RMCS'
            
        elif jobtype == 'Nordugrid':
            job_desc = 'Running SMEAGOL on Nordugrid'
                
        elif jobtype == 'Globus':
            job_desc = 'Running SMEAGOL with Globus'

        job.clear_steps()

        # Copy out all the input files
        files = self.get_parameter("input_files" )
        for f in files:
            directory,filename = os.path.split( f )
            print "got dir,file %s,%s" % (directory,filename)
            job.add_step( jobmanager.COPY_OUT_FILE,
                          'transfer input: %s' % f,
                          local_filename=f,
                          remote_filename=filename)

        stdin_file = files[0]
        # hack - nuke the defaults
        defaults.set_value('smeagol_input',None)
        job.add_step( jobmanager.RUN_APP,
                      job_desc,
                      stdin_file=stdin_file)

        directory = job.get_parameter("directory")
        job.add_step(jobmanager.COPY_BACK_DIRECTORY,'recover outputs',remote_directory=directory)
        job.add_tidy(self.endjob)

        #jmht - hack
        job.calc = self
        return job

    def set_job_defaults(self,job):
        """Set any default parameters for calculations with this type of job
           This method should be overwritten (if need be) in any derived class.
        """
        if job.jobtype == LOCALHOST:
            pass
        else:
            pass
        return None

    def endjob(self,code=0):
        """This function is executed in the main thread"""

        directory = self.get_parameter("local_directory")
        if self.debug:
            print 'running endjob in directory: %s - code=' % (directory,code)

        # Get a reader objectt
        #reader = smeagolreader.SmeagolReader()
        reader = SmeagolIO()
        # Get any trajectory files
        anifiles = glob.glob("*.ANI")

        for f in anifiles:
            print "trying to read file ",f
            #reader.read( f )
            reader.ReadFile( f )

        #results = reader.get_objects()
        results = reader.GetObjects()

        if not results:
            return None
        
        ed = self.get_editor()
        if ed:
            if ed.graph:
                ed.graph.import_objects(results)
                txt = "Objects loaded from punchfile:"
                if code > 1:
                    txt = txt  + "Structure update" + '\n'
                else:
                    txt = txt  + '\n'
                
                    for r in results:
                        txt = txt + r.title + '\n'
                ed.Info(txt)
            # Update 
            if ed.update_func and code > 0:
                o = self.get_input("mol_obj")
                #name = self.get_input("mol_name")
                ed.update_func(o)
                
        # jmht - is this a hack?
        self.job = None



class SMEAGOLCalcEd(calced.CalcEd):

    def __init__(self,root,calc,graph,**kw):

       
        calced.CalcEd.__init__(self,root,calc,graph,**kw)


        
        self.jobname_tool = tools.TextFieldTool(self,'job_name','Job Name')
        self.balloon.bind( self.jobname_tool.widget, 'Specify the prefix for all output files' )

        
        self.submission_policies = [ LOCALHOST, "SSH", "Loadleveler", "RMCS", "Nordugrid", "Globus"]
        self.submission_tool = tools.SelectOptionTool(self,'submission','Job Submission',
                                                self.submission_policies)


        self.fileFrame = Pmw.Group( self.interior(), tag_text='Files to transfer' )
        self.fileList = Pmw.ScrolledListBox(
            self.fileFrame.interior(),
            listbox_selectmode='extended',
            items=self.calc.get_parameter("input_files")
            )
        self.addFileButton = Tkinter.Button( self.fileFrame.interior(),
                                         text = 'Add',
                                         command = self.AddFile)
        self.delFileButton = Tkinter.Button( self.fileFrame.interior(),
                                        text = 'Del',
                                        command = self.DelFile)
        self.LayoutToolsTk()

        # initialise tools
        for tool in self.tools:
            tool.UpdateWidget()

    def AddFile(self):
        """Add a file to the list to be exported
        """
        
        oldfile = None
        olddir = None
        filepath = tkFileDialog.askopenfilename(initialfile=oldfile,
                                              initialdir=olddir)
        if len(filepath) == 0:
            # User didn't select owt
            return None
        else:
            all = self.fileList.get()
            # convert from list to tuple
            files = []
            for f in all:
                files.append(f)

            # Now add the new file
            files.append( filepath )
            self.fileList.setlist( files )

            # Update the calculation file list
            self.calc.set_parameter("input_files", files )
            
            return None

    def DelFile(self):
        """ Remove a file from the list to be exported
        """
        toRemove = self.fileList.getcurselection()

        all = self.fileList.get()
        files = []  # need to convert from tuple to a list
        for m in all:
            files.append( m )
        for f in toRemove:
            files.remove( f )
        self.fileList.setlist( files )
        return


    def LayoutToolsTk(self):
        """Place the widgets belonging to the tools (ChargeTool etc)
        This will generally be replaced by a more specific function
        for a particular code interface.
        """

        #Add Job tab
        page = self.notebook.add('Job',tab_text='Job')

        # Associate helpfile with notebook frame
        tab = self.notebook.tab('Job')
        viewer.help.sethelp(tab,'Job Tab')
        
        page.jobgroup = Pmw.Group(page,tag_text="Job Group")
        page.jobgroup.pack(side='top',expand='yes',fill='both')

        self.jobname_tool.widget.pack(in_=page.jobgroup.interior())
#        self.workingdirectory_tool.widget.pack(in_=page.jobgroup.interior())
#        self.submission_frame = Tkinter.Frame(page.jobgroup.interior(),relief=Tkinter.RAISED,borderwidth=2)
        self.submission_frame = Tkinter.Frame(page.jobgroup.interior())
        self.submission_frame.pack()
        self.submission_tool.widget.pack(in_=self.submission_frame,side='left')
        self.submission_config_button = Tkinter.Button(self.submission_frame,
                                                       text='Configure...',
                                                       command=self.open_jobsub_editor)
        self.submission_config_button.pack(side='left')


        # Layout the file chooser
        self.fileFrame.pack(in_=page.jobgroup.interior(),fill='both',expand=0)
        self.fileList.pack( side='left' )
        self.addFileButton.pack( side='left' )
        self.delFileButton.pack( side='left' )
        


if __name__ == "__main__":

    from objects.zmatrix import *
    from interfaces.smeagol import *
    from jobmanager import *

    # Create a dummy object for the calculation
    model = Zmatrix()
    atom = ZAtom()
    atom.symbol = 'H'
    atom.name = 'H'
    model.insert_atom(0,atom)
    atom.coord = [ 0.,0.,0. ]
    

    calc = SMEAGOLCalc()
    calc.set_input('mol_obj',model)
    
    root=Tkinter.Tk()

    jm = JobManager()
    je = JobEditor(root,jm)
    
    smged = SMEAGOLCalcEd(root,calc,None,job_editor=je)
    root.mainloop()
